{"version":3,"sources":["file:///E:/xisle-dev/xisle/hugo-site/themes/xisle/assets/js/main.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function (event) {\r\n\r\n        \r\n  initCesium();\r\n  console.log(\"\u003e\" + window.location.host);\r\n  console.log(\"\u003e\" + window.location.path);\r\n  htmx.on(\"htmx:afterSettle\", function (evt) {\r\n\r\n    if (evt.target.id === \"nav\") {\r\n\r\n\r\n\r\n      // const detailsElements = document.querySelectorAll(\".acc-con details\");\r\n      // detailsElements.forEach((details) =\u003e {\r\n      //   details.addEventListener(\"toggle\", () =\u003e {\r\n      //     if (details.open) {\r\n      //       detailsElements.forEach((otherDetails) =\u003e {\r\n      //         if (otherDetails !== details \u0026\u0026 otherDetails.open) {\r\n      //           otherDetails.removeAttribute(\"open\");\r\n      //         }\r\n      //       });\r\n      //     }\r\n      //   });\r\n      // });\r\n  \r\n\r\n\r\n    }\r\n  });\r\n\r\n\r\n\r\n\r\n});\r\n\r\nfunction initCesium() {\r\n  console.log(\"Initializing CesiumJS...\");\r\n\r\n  htmx.on(\"htmx:afterRequest\", (evt) =\u003e {\r\n    console.log(\"Navigate to \" + evt.detail.pathInfo.requestPath);\r\n\r\n    if (evt.srcElement.dataset) {\r\n      if (evt.srcElement.dataset.loc) {\r\n        console.log(JSON.parse(evt.srcElement.dataset.loc));\r\n        const location = JSON.parse(evt.srcElement.dataset.loc);\r\n        const view = location.view;\r\n        console.log(view);\r\n        viewer.camera.flyTo({\r\n          destination: Cesium.Cartesian3.fromDegrees(\r\n            view.longitude,\r\n            view.latitude,\r\n            view.height\r\n          ), // Seattle area\r\n          orientation: {\r\n            heading: Cesium.Math.toRadians(view.heading),\r\n            pitch: Cesium.Math.toRadians(view.pitch),\r\n            roll: Cesium.Math.toRadians(view.roll),\r\n          },\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  // CesiumJS access token (replace with your own if you have one)\r\n  // You can get a free token from https://cesium.com/ion/\r\n  Cesium.Ion.defaultAccessToken =\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2ZjVhODYyOS04NjBlLTQ5MDUtOWI4MC1hMGRiNWUwYTU0NGQiLCJpZCI6NTY2NCwic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTU0Mzg5MzE5Nn0.5VoO3hPjqXGjUQg0mF8Mt0JyeVwUKqytjrCtLvxGNw0\";\r\n\r\n  var terrain = Cesium.Terrain.fromWorldTerrain();\r\n\r\n  console.log(\"Create Viewer\");\r\n  //Initialize the Cesium Viewer\r\n  const viewer = new Cesium.Viewer(\"cesiumContainer\", {\r\n    useBrowserRecommendedResolution: false,\r\n    terrain: terrain,\r\n    animation: false,\r\n    timeline: false,\r\n    infoBox: false,\r\n    navigationHelpButton: false,\r\n    baseLayerPicker: false,\r\n    homeButton: false,\r\n    sceneModePicker: false,\r\n    resolutionScale: 1, // Set resolution scale to 1.0 for better performance\r\n  });\r\n\r\n  var views = [\r\n    {\r\n      latitude: 48.830054,\r\n      longitude: -123.758148,\r\n      height: 1000,\r\n      heading: 300,\r\n      pitch: -45,\r\n      roll: 0,\r\n    },\r\n    {\r\n      latitude: 48.830054,\r\n      longitude: -123.758148,\r\n      height: 1000,\r\n      heading: 300,\r\n      pitch: -30.5,\r\n      roll: 0,\r\n    },\r\n    {\r\n      latitude: 48.830054,\r\n      longitude: -123.758148,\r\n      height: 1000,\r\n      heading: 300,\r\n      pitch: -15,\r\n      roll: 0,\r\n    },\r\n  ];\r\n  var view = views[0];\r\n\r\n  var position = new Cesium.Cartesian3.fromDegrees(\r\n    view.longitude,\r\n    view.latitude,\r\n    view.height\r\n  );\r\n  var orientation = {\r\n    heading: Cesium.Math.toRadians(view.heading),\r\n    pitch: Cesium.Math.toRadians(view.pitch),\r\n    roll: Cesium.Math.toRadians(view.roll),\r\n  };\r\n\r\n  viewer.camera.setView({\r\n    destination: position,\r\n    orientation: orientation,\r\n  });\r\n\r\n  Cesium.GeoJsonDataSource.load(\"/pins/locations.json\", {\r\n    clampToGround: true,\r\n  }).then((dataSource) =\u003e {\r\n    viewer.dataSources.add(dataSource);\r\n\r\n    const entities = dataSource.entities.values;\r\n    for (let i = 0; i \u003c entities.length; i++) {\r\n      const entity = entities[i];\r\n\r\n      let labelText = \"\";\r\n      if (\r\n        Cesium.defined(entity.properties) \u0026\u0026\r\n        Cesium.defined(entity.properties.title)\r\n      ) {\r\n        labelText = entity.properties.title.getValue();\r\n      } else {\r\n        // Fallback if no specific property is found\r\n        labelText = entity.id; // Or any other default\r\n      }\r\n\r\n      entity.billboard.image = \"/images/npsPictograph_0231b.png\";\r\n      entity.billboard.scale = 0.4;\r\n      entity.label = {\r\n        //showBackground: true,\r\n        //backgroundColor: Cesium.Color.BLACK.withAlpha(0.5),\r\n        text: labelText,\r\n        font: \"14pt sans-serif\",\r\n        fillColor: Cesium.Color.YELLOW,\r\n        outlineColor: Cesium.Color.WHITE,\r\n        outlineWidth: 1,\r\n        style: Cesium.LabelStyle.FILL_AND_OUTLINE,\r\n        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n        pixelOffset: new Cesium.Cartesian2(0, -29),\r\n        disableDepthTestDistance: Number.POSITIVE_INFINITY, // Keep label visible even when \"behind\" terrain\r\n      };\r\n\r\n      const pixelRange = 15;\r\n      const minimumClusterSize = 2;\r\n      const enabled = true;\r\n\r\n      dataSource.clustering.enabled = enabled;\r\n      dataSource.clustering.pixelRange = pixelRange;\r\n      dataSource.clustering.minimumClusterSize = minimumClusterSize;\r\n    }\r\n  });\r\n\r\n  // viewer.dataSources.add(\r\n  //    Cesium.GeoJsonDataSource.load(\"/areas/locations.json\", {\r\n  //      stroke: Cesium.Color.GREEN,\r\n  //      fill: Cesium.Color.DARKGREEN,\r\n  //      strokeWidth: 3,\r\n  //      markerSymbol: \"A\",\r\n  //    })\r\n  //  );\r\n\r\n  // Optional: Add a click event listener to the Cesium map\r\n  // to update the info div with clicked coordinates\r\n  const latitudeSpan = document.getElementById(\"latitude\");\r\n  const longitudeSpan = document.getElementById(\"longitude\");\r\n  const altitudeSpan = document.getElementById(\"altitude\");\r\n\r\n  const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\r\n\r\n  viewer.selectedEntityChanged.addEventListener(function (selectedEntity) {\r\n    if (Cesium.defined(selectedEntity)) {\r\n      if (Cesium.defined(selectedEntity.properties)) {\r\n        if (Cesium.defined(selectedEntity.properties.link)) {\r\n          var link = selectedEntity.properties.link.getValue() + \"summary.txt \";\r\n          var xhttp = new XMLHttpRequest();\r\n          xhttp.onreadystatechange = function () {\r\n            if (this.readyState == 4 \u0026\u0026 this.status == 200) {\r\n              document\r\n                .getElementById(\"htmlSummaryContainer\")\r\n                .setHTMLUnsafe(this.responseText);\r\n              document.getElementById(\"htmlSummaryContainer\").style.display =\r\n                \"block\";\r\n              viewer.flyTo(selectedEntity);\r\n            }\r\n          };\r\n\r\n          xhttp.open(\"GET\", link, true);\r\n          xhttp.send();\r\n        }\r\n      } else {\r\n        console.log(\"Unknown entity selected.\");\r\n        document.getElementById(\"htmlSummaryContainer\").style.display = \"none\";\r\n      }\r\n    } else {\r\n      document.getElementById(\"htmlSummaryContainer\").style.display = \"none\";\r\n      console.log(\"Deselected.\");\r\n    }\r\n  });\r\n\r\n  handler.setInputAction(function (event) {\r\n    var ray = viewer.camera.getPickRay(event.position);\r\n    if (ray) {\r\n      var mousePosition = viewer.scene.globe.pick(ray, viewer.scene);\r\n\r\n      if (Cesium.defined(mousePosition)) {\r\n        var cartographic = Cesium.Cartographic.fromCartesian(mousePosition);\r\n        var mouseLat = Cesium.Math.toDegrees(cartographic.latitude);\r\n        var mouseLon = Cesium.Math.toDegrees(cartographic.longitude);\r\n        var mouseHeight = cartographic.height;\r\n\r\n        var camera = viewer.scene.camera;\r\n        var position = camera.positionCartographic;\r\n        var orientation = { heading: 0, roll: 0, pitch: 0 };\r\n        orientation.heading = camera.heading;\r\n        orientation.pitch = camera.pitch;\r\n        orientation.roll = camera.roll;\r\n        var view = {\r\n          latitude: Cesium.Math.toDegrees(position.latitude),\r\n          longitude: Cesium.Math.toDegrees(position.longitude),\r\n          height: position.height,\r\n          heading: Cesium.Math.toDegrees(orientation.heading),\r\n          pitch: Cesium.Math.toDegrees(orientation.pitch),\r\n          roll: Cesium.Math.toDegrees(orientation.roll),\r\n        };\r\n        var json = {\r\n          location: {\r\n            latitude: mouseLat,\r\n            longitude: mouseLon,\r\n            elevation: mouseHeight,\r\n          },\r\n          view: view,\r\n        };\r\n        navigator.clipboard.writeText(JSON.stringify(json));\r\n\r\n        const longitude = Cesium.Math.toDegrees(cartographic.longitude).toFixed(\r\n          4\r\n        );\r\n        const latitude = Cesium.Math.toDegrees(cartographic.latitude).toFixed(\r\n          4\r\n        );\r\n        const altitude = cartographic.height.toFixed(2);\r\n\r\n        latitudeSpan.textContent = `${latitude}°`;\r\n        longitudeSpan.textContent = `${longitude}°`;\r\n        altitudeSpan.textContent = `${altitude} m`;\r\n\r\n        //navigator.clipboard.writeText(JSON.stringify(json));\r\n        console.log(JSON.stringify(json));\r\n      }\r\n    }\r\n  }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n\r\n  // handler.setInputAction(function (movement) {\r\n  //   const ray = viewer.camera.getPickRay(movement.position);\r\n  //   if (ray) {\r\n  //     const cartesian = viewer.scene.globe.pick(ray, viewer.scene);\r\n  //     if (cartesian) {\r\n  //       const cartographic = Cesium.Cartographic.fromCartesian(cartesian);\r\n  //       const longitude = Cesium.Math.toDegrees(cartographic.longitude).toFixed(\r\n  //         4\r\n  //       );\r\n  //       const latitude = Cesium.Math.toDegrees(cartographic.latitude).toFixed(\r\n  //         4\r\n  //       );\r\n  //       const altitude = cartographic.height.toFixed(2);\r\n\r\n  //       latitudeSpan.textContent = `${latitude}°`;\r\n  //       longitudeSpan.textContent = `${longitude}°`;\r\n  //       altitudeSpan.textContent = `${altitude} m`;\r\n  //     }\r\n  //   }\r\n  // }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\r\n\r\n  //Set initial camera view\r\n  viewer.camera.flyTo({\r\n    destination: Cesium.Cartesian3.fromDegrees(-122.39, 47.56, 1500000), // Seattle area\r\n    orientation: {\r\n      heading: Cesium.Math.toRadians(0.0),\r\n      pitch: Cesium.Math.toRadians(-90.0),\r\n      roll: Cesium.Math.toRadians(0.0),\r\n    },\r\n  });\r\n\r\n  //Ensure the Cesium viewer resizes correctly with the window\r\n  window.addEventListener(\"resize\", () =\u003e {\r\n    viewer.container.style.width = \"100vw\";\r\n    viewer.container.style.height = \"100vh\";\r\n    viewer.resize();\r\n  });\r\n}\r\n\r\n"],"mappings":"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","names":["view","position","orientation"]}